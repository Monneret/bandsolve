% Generated by roxygen2: do not edit by hand
<<<<<<< HEAD
% Please edit documentation in R/bandsolve.R
\name{bandsolve}
\alias{bandsolve}
\title{bandsolve}
=======
% Please edit documentation in R/RcppExports.R, R/bandsolve.R
\name{bandsolve}
\alias{bandsolve}
\title{fastbandsolve}
>>>>>>> 646e99269176997e1649191c218d72003b90c67e
\usage{
bandsolve(A, b = NULL, inplace = FALSE)
}
\arguments{
\item{A}{Band square matrix in rotated form. The rotated form can be obtained with the function as.rotated: it's the visual rotation by 90 degrees of the matrix, where subdiagonal are discarded.}

<<<<<<< HEAD
\item{b}{right hand side of the equation. Can be either a vector or a matrix. If not supplied, the function return the inverse of A.}

\item{inplace}{Should results overwrite pre-existing data? Default set to false.}
}
\value{
Solution of the linear problem.
}
\description{
=======
\item{b}{Right hand side of the linear system}

\item{inplace}{Should results overwrite pre-existing data? Default set to false.}

\item{D}{Rotated row-wised matrix.}

\item{D}{Rotated row-wised matrix.}

\item{b}{Right hand side of the linear system}

\item{b}{right hand side of the equation. Can be either a vector or a matrix. If not supplied, the function return the inverse of A.}
}
\value{
List with components with the solution of the linear system and the rotated matrixes L and U.

List with components with the solution of the linear system and the rotated matrixes L and U.

Solution of the linear problem.
}
\description{
Fast inplace solver for linears systems involving band matrix.

Fast inplace solver for linears systems involving band matrix.

>>>>>>> 646e99269176997e1649191c218d72003b90c67e
Main function to solve efficiently and quickly a symmetric bandlinear system. Theses systems are solved much faster than standards system, dropping from complexity O(n³) to O(0.5*nk²), where k is the number of sub diagonal.
}
\examples{
n=2000;
<<<<<<< HEAD
=======
D0=3+runif(n);
D1=-0.2*runif(n-1);
D=cbind(D0,c(D1,0))
b=runif(n)
sol=fastbandsolve(D,b,l=1,u=0)
n=2000;
D0=3+runif(n);
D1=-0.2*runif(n-1);
D=cbind(D0,c(D1,0))
b=runif(n)
sol=fastbandsolve(D,b,l=1,u=0)
n=2000;
>>>>>>> 646e99269176997e1649191c218d72003b90c67e
A=diag(4)
A[2,3]=2
ref=as.rotated(A,l=0,u=1)
bandsolve(ref)
\\code{\\link{LDL}},\\code{\\link{rot.as.mat}},\\code{\\link{as.rotated}}
}

